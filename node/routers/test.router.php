<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;        //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;            //PSR7 ResponseInterface        >> Each router file must contains this

//Define additional class for any purpose
use \classes\middleware\ValidateParam as ValidateParam;         //ValidateParam Middleware      >> To validate the body param request
use \classes\middleware\ValidateParamURL as ValidateParamURL;   //ValidateParamURL Middleware   >> To validate the query param url request
use \classes\middleware\ValidateParamJSON as ValidateParamJSON; //ValidateParamJSON Middleware  >> To validate the JSON request
use \classes\middleware\ApiKey as ApiKey;                       //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim
use \classes\SimpleCache as SimpleCache;                        //SimpleCache class             >> To cache response ouput server side
use \classes\JSON as JSON;                                      //JSON class                    >> To handle JSON in better way (also for debug purpose)
use \classes\CustomHandlers as CustomHandlers;                  //CustomHandlers message class  >> Default message handler in reSlim (multilanguage)


/**
 * Test Router is for testing purpose
 * If you are new to use reSlim, this is good to learn how reSlim router works
 * 
 * For better running test You can use postman and import the [reSlim Dev Test.postman_collection.json] file
 */


//=====================TEST Debug JSON START=====================

/**
 * Everything response output in reSlim is json string
 * So able to debug JSON is important thing
 */

// Test debug json string with valid json format
$app->get('/dev/response/test/debug/json/valid', function (Request $request, Response $response) {
    $json = '{"result":"here is valid json formatted."}';
    $body = $response->getBody();
    $body->write(JSON::debug_decode($json));
    return classes\Cors::modify($response,$body,200);
});

// Test debug json string with invalid json format
$app->get('/dev/response/test/debug/json/invalid', function (Request $request, Response $response) {
    $json = '{"result":"here is invalid json formatted.}';
    $body = $response->getBody();
    $body->write(JSON::debug_decode($json));
    return classes\Cors::modify($response,$body,200);
});

//=====================TEST Debug JSON END=====================


//=====================TEST Basic Response START=====================

// Test get response
$app->get('/dev/response/test', function (Request $request, Response $response) {
    $body = $response->getBody();
    $body->write('{"result":"make sure here is already valid json formatted."}');
    return classes\Cors::modify($response,$body,200);
});

/**
 * Test get response with custom handler message
 * The purpose of this example test is to make your enduser able to change the output response message from your rest api. 
 * 
 * Note:
 * - Default reslim handler message is only have two language, it is english (en) and indonesian (id).
 * - Handler message is already set default as "en" in config.php
 * - Example url api to change the message from english to indonesian >> http://yourdomain.com/api/dev/response/test/message/id
 */
$app->get('/dev/response/test/message/{lang}', function (Request $request, Response $response) {
    $body = $response->getBody();
    $msg = json_encode([
        'status' => 'success', // status message (success or error), must be in English to follow the Rest API communication standards
        'code' => 'RS501',
        'message' => CustomHandlers::getreSlimMessage('RS501',$request->getAttribute('lang'))
    ]);
    $body->write($msg);
    return classes\Cors::modify($response,$body,200);
});

//=====================TEST Basic Response END=====================


//=====================TEST CACHE START=====================

/**
 * Test get response using http-cache
 * 
 * Here is default ETag which is auto generated from server
 * - $this->etag >> ETag will refreshed interval 5 minutes
 * - $this->etag30min >> ETag will refreshed interval 30 minutes
 * - $this->etag1hour >> ETag will refreshed interval 1 hour
 * - $this->etag2hour >> ETag will refreshed interval 2 hour
 * 
 * But of course you can create your etag by yourself with different purpose
 * You can follow the rules from Slim Framework how to create the ETag, Expires also Last-Modified
 * 
 * How to check if the cache is working as expected?
 * - See the network panel in the developer console of browser, you will get 301 not modified response
 * - If http cache not working, it cause many factors like wrong proxy configuration or if you are using cloudflare with wrong settings.
 */
$app->get('/dev/response/test/cache/http', function (Request $request, Response $response) {
    $body = $response->getBody();
    $response = $this->cache->withEtag($response, $this->etag30min.'-'.trim($_SERVER['REQUEST_URI'],'/'));
    $body->write('{"result":"make sure here is already json formatted."}');
    return classes\Cors::modify($response,$body,200);
});

/**
 * Test get response using cache server side
 * The concept of this cache is traditional filebased (No using 3rd party like redis, opcache, etc)
 * 
 * Note:
 * - SimpleCache class will auto create file cache following the router as identity
 * 
 * How to check if the cache is working as expected?
 * - You can check the cached file is saved inside folder >> api/cache 
 */
$app->get('/dev/response/test/cache/server', function (Request $request, Response $response) {
    $body = $response->getBody();
    //Determine if there is already cached within 3600 second or not
    if (SimpleCache::isCached(3600)){
        //simplecache will auto find the filename of cache
        $datajson = SimpleCache::load();
    } else {
        //if there is no cached file or the cached file is already expired
        $datajson = SimpleCache::save('{"result":"make sure here is already json formatted."}',null,null,3600);
    }
    $body->write($datajson);
    return classes\Cors::modify($response,$body,200);
});

/**
 * Test get response using cache server side with custom query parameter
 * 
 * Note:
 * - ['page','title'] means to build the filename of cache will also follow the query parameter url
 * 
 * How to check if the cache is working as expected?
 * - You can check the cached file is saved inside folder >> api/cache 
 */
$app->get('/dev/response/test/cache/server/withparam', function (Request $request, Response $response) {
    $body = $response->getBody();
    //Set the query parameter url to be cached
    $params = ["page","title"];
    //Determine if there is already cached within 3600 second or not
    if (SimpleCache::isCached(3600,$params)){
        //simplecache will auto find the filename of cache
        $datajson = SimpleCache::load($params);
    } else {
        //if there is no cached file or the cached file is already expired
        $datajson = SimpleCache::save('{"result":"make sure here is already json formatted."}',$params,null,3600);
    }
    $body->write($datajson);
    return classes\Cors::modify($response,$body,200);
});

//=====================TEST CACHE END=====================


//=====================TEST ApiKey START=====================

// Test get response with API Key in URL (Make sure you have already create an api key)
// Example url >> http://yourdomain.com/api/dev/response/test/api/url/?apikey=yourapikeyishere
// Note: Pure Javascript AJAX will not working because OPTIONS request is required to send header
$app->get('/dev/response/test/api/url/', function (Request $request, Response $response) {
    $body = $response->getBody();
    $body->write('{"result":"make sure here is already json formatted."}');
    return classes\Cors::modify($response,$body,200);
})->add(new APIKey);

// Test get/post/options response with API Key use Authorization Header (Make sure you have already create an api key)
// Example url >> http://yourdomain.com/api/dev/response/test/api/header
// Example header >> AUTHORIZATION: yourapikeyishere
$app->map(['GET','POST','OPTIONS'],'/dev/response/test/api/header', function (Request $request, Response $response) {
    $body = $response->getBody();
    $body->write('{"result":"make sure here is already json formatted."}');
    return classes\Cors::modify($response,$body,200,$request); //>> This will make cors to check registered domain origin in apikey is match or not
    //return classes\Cors::modify($response,$body,200); //>> This will allow all cors origin (Note: this is not recommended because apikey will works on all websites)
})->add(new APIKey);

//=====================TEST ApiKey END=====================


//=====================TEST ValidateParam START=====================

// Test middleware ValidateParam class
$app->post('/dev/middleware/test/param/body', function (Request $request, Response $response) {
    $body = $response->getBody();
    $body->write('{"result":"Congrats, Validation body form is passed successfully."}');
    return classes\Cors::modify($response,$body,200);
})->add(new ValidateParam(['username'],'6-50','required'))
    ->add(new ValidateParam(['address'],'','required'))
    ->add(new ValidateParam(['phone'],'1-15','notzero'))
    ->add(new ValidateParam(['fax'],'0-15','numeric'))
    ->add(new ValidateParam('email','0-50','email'))
    ->add(new ValidateParam(['fullname','aboutme'],'0-160'));

// Test middleware ValidateParamJSON class
$app->post('/dev/middleware/test/param/json', function (Request $request, Response $response) {
    $body = $response->getBody();
    $body->write('{"result":"Congrats, Validation JSON is passed successfully."}');
    return classes\Cors::modify($response,$body,200);
})->add(new ValidateParamJSON(['username'],'6-50','required'))
    ->add(new ValidateParamJSON(['address'],'','required'))
    ->add(new ValidateParamJSON(['phone'],'1-15','notzero'))
    ->add(new ValidateParamJSON(['fax'],'0-15','numeric'))
    ->add(new ValidateParamJSON('email','0-50','email'))
    ->add(new ValidateParamJSON(['fullname','aboutme'],'0-160'));

// Test middleware ValidateParamURL class
$app->get('/dev/middleware/test/param/url/', function (Request $request, Response $response) {
    $body = $response->getBody();
    $body->write('{"result":"Congrats, Validation query parameter URL is passed successfully."}');
    return classes\Cors::modify($response,$body,200);
})->add(new ValidateParamURL(['username'],'6-50','required'))
    ->add(new ValidateParamURL(['address'],'','required'))
    ->add(new ValidateParamURL(['phone'],'1-15','notzero'))
    ->add(new ValidateParamURL(['fax'],'0-15','numeric'))
    ->add(new ValidateParamURL('email','0-50','email'))
    ->add(new ValidateParamURL(['fullname','aboutme'],'0-160'));


//=====================TEST ValidateParam END=====================


//=====================TEST Create Log START=====================

$app->map(['POST','GET'],'/dev/test/log/create', function (Request $request, Response $response) {
    $this->logger->addInfo("Success to create new log!!!");
    $body = $response->getBody();
    $body->write('{"result":"Create log is successfully."}');
    return classes\Cors::modify($response,$body,200);
});

//=====================TEST Create Log END=====================