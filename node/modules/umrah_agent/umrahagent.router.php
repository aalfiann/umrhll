<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;        //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;            //PSR7 ResponseInterface        >> Each router file must contains this

//Define your modules class
use \modules\umrah_agent\UmrahAgent as UmrahAgent;              //Your main modules class

//Define additional class for any purpose
use \classes\middleware\ValidateParam as ValidateParam;         //ValidateParam                 >> To validate the body form request  
use \classes\middleware\ValidateParamURL as ValidateParamURL;   //ValidateParamURL              >> To validate the query parameter url
use \classes\middleware\ApiKey as ApiKey;                       //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim
use \classes\SimpleCache as SimpleCache;                        //SimpleCache class             >> To cache response ouput server side


    // Get module information
    $app->map(['GET','OPTIONS'],'/umrah_agent/get/info/', function (Request $request, Response $response) {
        $ua = new UmrahAgent($this->db);
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag2hour.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        $body->write($ua->viewInfo());
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ApiKey);

    // Installation 
    $app->get('/umrah_agent/install/{username}/{token}', function (Request $request, Response $response) {
        $ua = new UmrahAgent($this->db);
        $ua->username = $request->getAttribute('username');
        $ua->token = $request->getAttribute('token');
        $body = $response->getBody();
        $body->write($ua->install());
        return classes\Cors::modify($response,$body,200);
    });

    // Uninstall (This will clear all data) 
    $app->get('/umrah_agent/uninstall/{username}/{token}', function (Request $request, Response $response) {
        $ua = new UmrahAgent($this->db);
        $ua->username = $request->getAttribute('username');
        $ua->token = $request->getAttribute('token');
        $body = $response->getBody();
        $body->write($ua->uninstall());
        return classes\Cors::modify($response,$body,200);
    });


    //CRUD======================================================


    // POST api to create new data
    $app->post('/umrah_agent/create', function (Request $request, Response $response) {
        $datapost = $request->getParsedBody();
        $customjson = [
            'ReferenceID' => $datapost['ReferenceID'],
            'Program' => $datapost['Program'],
            'Pernah_Haji' => $datapost['Pernah_Haji']
        ];
        $extendjson = [
            'Nama_Ayah_Kandung' => $datapost['Nama_Ayah_Kandung'],
            'Tempat_Lahir' => $datapost['Tempat_Lahir'],
            'Tanggal_Lahir' => $datapost['Tanggal_Lahir'],
            'Jenis_Kelamin' => $datapost['Jenis_Kelamin'],
            'Kewarganegaraan' => $datapost['Kewarganegaraan'],
            'Kelurahan' => $datapost['Kelurahan'],
            'Kecamatan' => $datapost['Kecamatan'],
            'Kabupaten' => $datapost['Kabupaten'],
            'Provinsi' => $datapost['Provinsi'],
            'Kodepos' => $datapost['Kodepos'],
            'No' => $datapost['No'],
            'RT' => $datapost['RT'],
            'RW' => $datapost['RW'],
            'Pendidikan' => $datapost['Pendidikan'],
            'Pekerjaan' => $datapost['Pekerjaan'],
            'Nama_Mahram' => $datapost['Nama_Mahram'],
            'Hubungan_Mahram' => $datapost['Hubungan_Mahram'],
            'Golongan_Darah' => $datapost['Golongan_Darah'],
            'Status_Perkawinan' => $datapost['Status_Perkawinan'],
            'Ciri' => [
                'Rambut' => $datapost['Rambut'],
                'Alis' => $datapost['Alis'],
                'Hidung' => $datapost['Hidung'],
                'Mata' => $datapost['Mata'],
                'Tinggi' => $datapost['Tinggi'],
                'Berat' => $datapost['Berat']
            ],
            'Image' => (!empty($datapost['Image'])?$datapost['Image']:''),
            'Address' => $datapost['Address'],
            'Phone' => $datapost['Phone'],
            'Email' => $datapost['Email'],
            'Website' => $datapost['Website'] 
        ];
        $ua = new UmrahAgent($this->db);
        $ua->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $ua->id = $datapost['ID'];
        $ua->statusid = '35';
        $ua->username = $datapost['Username'];
        $ua->token = $datapost['Token'];
        $ua->fullname = $datapost['Fullname'];
        $ua->custom_id = json_encode($customjson);
        $ua->extend = json_encode($extendjson);
        $body = $response->getBody();
        $body->write($ua->create());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('ReferenceID','0-50'))
        ->add(new ValidateParam('Tanggal_Lahir','10-10','date'))
        ->add(new ValidateParam(['Tempat_Lahir','Jenis_Kelamin','Golongan_Darah','Status_Perkawinan',
            'Hubungan_Mahram','Kewarganegaraan','Pendidikan','Pekerjaan'],'1-25','required'))
        ->add(new ValidateParam(['Kelurahan','Kecamatan','Kabupaten','Provinsi',
            'Rambut','Alis','Hidung','Mata'],'0-25'))
        ->add(new ValidateParam(['Program','Pernah_Haji'],'1-5'))
        ->add(new ValidateParam('Website','0-50','domain'))
        ->add(new ValidateParam('Email','0-50','email'))
        ->add(new ValidateParam(['Tinggi','Berat'],'0-5','decimal'))
        ->add(new ValidateParam(['No','RT','RW','Kodepos'],'0-11','numeric'))
        ->add(new ValidateParam('Phone','1-15','numeric'))
        ->add(new ValidateParam(['Token','Address'],'1-250','required'))
        ->add(new ValidateParam(['Username','Fullname','ID','Nama_Ayah_Kandung','Nama_Mahram'],'1-50','required'));


    // POST api to update data
    $app->post('/umrah_agent/update', function (Request $request, Response $response) {
        $datapost = $request->getParsedBody();
        $customjson = [
            'ReferenceID' => $datapost['ReferenceID'],
            'Program' => $datapost['Program'],
            'Pernah_Haji' => $datapost['Pernah_Haji']
        ];
        $extendjson = [
            'Nama_Ayah_Kandung' => $datapost['Nama_Ayah_Kandung'],
            'Tempat_Lahir' => $datapost['Tempat_Lahir'],
            'Tanggal_Lahir' => $datapost['Tanggal_Lahir'],
            'Jenis_Kelamin' => $datapost['Jenis_Kelamin'],
            'Kewarganegaraan' => $datapost['Kewarganegaraan'],
            'Kelurahan' => $datapost['Kelurahan'],
            'Kecamatan' => $datapost['Kecamatan'],
            'Kabupaten' => $datapost['Kabupaten'],
            'Provinsi' => $datapost['Provinsi'],
            'Kodepos' => $datapost['Kodepos'],
            'No' => $datapost['No'],
            'RT' => $datapost['RT'],
            'RW' => $datapost['RW'],
            'Pendidikan' => $datapost['Pendidikan'],
            'Pekerjaan' => $datapost['Pekerjaan'],
            'Nama_Mahram' => $datapost['Nama_Mahram'],
            'Hubungan_Mahram' => $datapost['Hubungan_Mahram'],
            'Golongan_Darah' => $datapost['Golongan_Darah'],
            'Status_Perkawinan' => $datapost['Status_Perkawinan'],
            'Ciri' => [
                'Rambut' => $datapost['Rambut'],
                'Alis' => $datapost['Alis'],
                'Hidung' => $datapost['Hidung'],
                'Mata' => $datapost['Mata'],
                'Tinggi' => $datapost['Tinggi'],
                'Berat' => $datapost['Berat']
            ],
            'Image' => (!empty($datapost['Image'])?$datapost['Image']:''),
            'Address' => $datapost['Address'],
            'Phone' => $datapost['Phone'],
            'Email' => $datapost['Email'],
            'Website' => $datapost['Website'] 
        ];
        $ua = new UmrahAgent($this->db);
        $ua->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $ua->username = $datapost['Username'];
        $ua->token = $datapost['Token'];
        $ua->fullname = $datapost['Fullname'];
        $ua->statusid = (!empty($datapost['StatusID'])?$datapost['StatusID']:'');
        $ua->custom_id = json_encode($customjson);
        $ua->extend = json_encode($extendjson);
        $ua->id = $datapost['ID'];
        $body = $response->getBody();
        $body->write($ua->update());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('ReferenceID','0-50'))
        ->add(new ValidateParam('Tanggal_Lahir','10-10','date'))
        ->add(new ValidateParam(['Tempat_Lahir','Jenis_Kelamin','Golongan_Darah','Status_Perkawinan',
            'Hubungan_Mahram','Kewarganegaraan','Pendidikan','Pekerjaan'],'1-25','required'))
        ->add(new ValidateParam(['Kelurahan','Kecamatan','Kabupaten','Provinsi',
            'Rambut','Alis','Hidung','Mata'],'0-25'))
        ->add(new ValidateParam(['Program','Pernah_Haji'],'1-5'))
        ->add(new ValidateParam('Website','0-50','domain'))
        ->add(new ValidateParam('Email','0-50','email'))
        ->add(new ValidateParam(['Tinggi','Berat'],'0-5','decimal'))
        ->add(new ValidateParam(['No','RT','RW','Kodepos'],'0-11','numeric'))
        ->add(new ValidateParam('Phone','1-15','numeric'))
        ->add(new ValidateParam(['Token','Address'],'1-250','required'))
        ->add(new ValidateParam(['Username','Fullname','ID','Nama_Ayah_Kandung','Nama_Mahram'],'1-50','required'));


    // POST api to delete data
    $app->post('/umrah_agent/delete', function (Request $request, Response $response) {
        $ua = new UmrahAgent($this->db);
        $datapost = $request->getParsedBody();
        $ua->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $ua->id = $datapost['ID'];
        $ua->username = $datapost['Username'];
        $ua->token = $datapost['Token'];
        $body = $response->getBody();
        $body->write($ua->delete());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('ID','1-11','numeric'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));


    // GET api to show all data (index) with pagination
    $app->get('/umrah_agent/index/{username}/{token}/{page}/{itemsperpage}/', function (Request $request, Response $response) {
        $ua = new UmrahAgent($this->db);
        $ua->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $ua->search = filter_var((empty($_GET['query'])?'':$_GET['query']),FILTER_SANITIZE_STRING);
        $ua->username = $request->getAttribute('username');
        $ua->token = $request->getAttribute('token');
        $ua->page = $request->getAttribute('page');
        $ua->itemsPerPage = $request->getAttribute('itemsperpage');
        $body = $response->getBody();
        $body->write($ua->index());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParamURL('query'));


    // GET api to show all data (index) with pagination
    $app->get('/umrah_agent/index/keywords/{username}/{token}/{page}/{itemsperpage}/', function (Request $request, Response $response) {
        $ua = new UmrahAgent($this->db);
        $ua->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $ua->search = filter_var((empty($_GET['query'])?'':$_GET['query']),FILTER_SANITIZE_STRING);
        $ua->firstdate = filter_var((empty($_GET['firstdate'])?'':$_GET['firstdate']),FILTER_SANITIZE_STRING);
        $ua->lastdate = filter_var((empty($_GET['lastdate'])?'':$_GET['lastdate']),FILTER_SANITIZE_STRING);
        $ua->custom_id = (empty($_GET['keywords'])?'':$_GET['keywords']);
        $ua->username = $request->getAttribute('username');
        $ua->token = $request->getAttribute('token');
        $ua->page = $request->getAttribute('page');
        $ua->itemsPerPage = $request->getAttribute('itemsperpage');
        $body = $response->getBody();
        $body->write($ua->indexKey());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParamURL('query'))->add(new ValidateParamURL('keywords','0-250'));


    // GET api to read single data
    $app->get('/umrah_agent/read/{id}/{username}/{token}', function (Request $request, Response $response) {
        $ua = new UmrahAgent($this->db);
        $ua->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $ua->username = $request->getAttribute('username');
        $ua->token = $request->getAttribute('token');
        $ua->id = $request->getAttribute('id');
        $body = $response->getBody();
        $body->write($ua->read());
        return classes\Cors::modify($response,$body,200);
    });

    // GET api to read single data for public user (include cache)
    $app->map(['GET','OPTIONS'],'/umrah_agent/read/{id}/', function (Request $request, Response $response) {
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        if (SimpleCache::isCached(300,["apikey","lang"])){
            $datajson = SimpleCache::load(["apikey","lang"]);
        } else {
            $ua = new UmrahAgent($this->db);
            $ua->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
            $ua->id = $request->getAttribute('id');
            $datajson = SimpleCache::save($ua->readPublic(),["apikey","lang"],null,300);
        }
        $body->write($datajson);
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('lang','0-2'))->add(new ApiKey);