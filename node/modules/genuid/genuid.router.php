<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;    //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;        //PSR7 ResponseInterface        >> Each router file must contains this

//Define your modules class
use \modules\genuid\Genuid as Genuid;                       //Your main modules class

//Define additional class for any purpose
use \classes\middleware\ValidateParam as ValidateParam;     //ValidateParam                 >> To validate the body form request
use \classes\middleware\ApiKey as ApiKey;                   //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim

    
    // Get module information (include cache and for public user)
    $app->map(['GET','OPTIONS'],'/genuid/get/info/', function (Request $request, Response $response) {
        $s = new Genuid($this->db);
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag2hour.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        $body->write($s->viewInfo());
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ApiKey);


    /**
     * Generate UUID version 3
     */
    $app->post('/genuid/uuid/v3', function(Request $request, Response $response){
        $uuid = new Genuid($this->db);
        $uuid->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $uuid->username = $datapost['Username'];
        $uuid->token = $datapost['Token'];
        $uuid->namespace = $datapost['Namespace'];
        $uuid->name = $datapost['Name'];
        $body = $response->getBody();
        $body->write($uuid->uuidv3());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'))
        ->add(new ValidateParam('Namespace','36-36','/^\{?[0-9a-f]{8}\-?[0-9a-f]{4}\-?[0-9a-f]{4}\-?'.
        '[0-9a-f]{4}\-?[0-9a-f]{12}\}?$/i'))
        ->add(new ValidateParam('Name','1-36','required'));


    /**
     * Generate UUID version 4
     */
    $app->post('/genuid/uuid/v4', function(Request $request, Response $response){
        $uuid = new Genuid($this->db);
        $uuid->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $uuid->username = $datapost['Username'];
        $uuid->token = $datapost['Token'];
        $body = $response->getBody();
        $body->write($uuid->uuidv4());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));


    /**
     * Generate UUID version 5
     */
    $app->post('/genuid/uuid/v5', function(Request $request, Response $response){
        $uuid = new Genuid($this->db);
        $uuid->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $uuid->username = $datapost['Username'];
        $uuid->token = $datapost['Token'];
        $uuid->namespace = $datapost['Namespace'];
        $uuid->name = $datapost['Name'];
        $body = $response->getBody();
        $body->write($uuid->uuidv5());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'))
        ->add(new ValidateParam('Namespace','36-36','/^\{?[0-9a-f]{8}\-?[0-9a-f]{4}\-?[0-9a-f]{4}\-?'.
        '[0-9a-f]{4}\-?[0-9a-f]{12}\}?$/i'))
        ->add(new ValidateParam('Name','1-36','required'));


    /**
     * Generate UID Dechex
     */
    $app->post('/genuid/uid/dechex', function(Request $request, Response $response){
        $uid = new Genuid($this->db);
        $uid->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $uid->username = $datapost['Username'];
        $uid->token = $datapost['Token'];
        $uid->prefix = (!empty($datapost['Prefix'])?$datapost['Prefix']:'');
        $uid->suffix = (!empty($datapost['Suffix'])?$datapost['Suffix']:'');
        $body = $response->getBody();
        $body->write($uid->short_dechex());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));


    /**
     * Generate UID Base Convert
     */
    $app->post('/genuid/uid/baseconvert', function(Request $request, Response $response){
        $uid = new Genuid($this->db);
        $uid->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $uid->username = $datapost['Username'];
        $uid->token = $datapost['Token'];
        $uid->prefix = (!empty($datapost['Prefix'])?$datapost['Prefix']:'');
        $uid->suffix = (!empty($datapost['Suffix'])?$datapost['Suffix']:'');
        $body = $response->getBody();
        $body->write($uid->short_base());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));


    /**
     * Generate UID Uniqid Long
     */
    $app->post('/genuid/uid/uniqid/long', function(Request $request, Response $response){
        $uid = new Genuid($this->db);
        $uid->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $uid->username = $datapost['Username'];
        $uid->token = $datapost['Token'];
        $uid->prefix = (!empty($datapost['Prefix'])?$datapost['Prefix']:'');
        $uid->suffix = (!empty($datapost['Suffix'])?$datapost['Suffix']:'');
        $body = $response->getBody();
        $body->write($uid->uniqid_long());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));


    /**
     * Generate UID Uniqid Simple
     */
    $app->post('/genuid/uid/uniqid/simple', function(Request $request, Response $response){
        $uid = new Genuid($this->db);
        $uid->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $uid->username = $datapost['Username'];
        $uid->token = $datapost['Token'];
        $uid->prefix = (!empty($datapost['Prefix'])?$datapost['Prefix']:'');
        $uid->suffix = (!empty($datapost['Suffix'])?$datapost['Suffix']:'');
        $body = $response->getBody();
        $body->write($uid->uniqid_simple());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));


    /**
     * Generate UID Uniqid Numeric
     */
    $app->post('/genuid/uid/uniqid/numeric', function(Request $request, Response $response){
        $uid = new Genuid($this->db);
        $uid->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $uid->username = $datapost['Username'];
        $uid->token = $datapost['Token'];
        $uid->prefix = (!empty($datapost['Prefix'])?$datapost['Prefix']:'');
        $uid->suffix = (!empty($datapost['Suffix'])?$datapost['Suffix']:'');
        $body = $response->getBody();
        $body->write($uid->uniqid_numeric());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));


    /**
     * Generate UID Unique Custom
     */
    $app->post('/genuid/uid/unique/custom', function(Request $request, Response $response){
        $uid = new Genuid($this->db);
        $uid->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $uid->username = $datapost['Username'];
        $uid->token = $datapost['Token'];
        $uid->prefix = (!empty($datapost['Prefix'])?$datapost['Prefix']:'');
        $uid->suffix = (!empty($datapost['Suffix'])?$datapost['Suffix']:'');
        $body = $response->getBody();
        $body->write($uid->unique_custom());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));